|- let compose = fun f -> fun g -> fun x -> f (g x) in 
    let p = fun x -> x * x in
    let q = fun x -> x + 4 in
    compose p q 4 
  evalto 64
by E-Let {

|- fun f -> fun g -> fun x -> f (g x) evalto ()[fun f -> fun g -> fun x -> f (g x)] by E-Fun {};
compose = ()[fun f -> fun g -> fun x -> f (g x)] |-
    let p = fun x -> x * x in
    let q = fun x -> x + 4 in
    compose p q 4 
  evalto 64
by E-Let {

compose = ()[fun f -> fun g -> fun x -> f (g x)] |-
  fun x -> x * x evalto (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x] by E-Fun {};
compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x] |-
    let q = fun x -> x + 4 in
    compose p q 4
  evalto 64
by E-Let {

compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x] |-
  fun x -> x + 4 evalto (compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4] by E-Fun {};
(* Env *)
  compose = ()[fun f -> fun g -> fun x -> f (g x)],
  p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x],
  q = (compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4]
  |-
    compose p q 4
  evalto 64
by E-App {

(* E-App 1 *)
  (* Env *)
    compose = ()[fun f -> fun g -> fun x -> f (g x)],
    p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x],
    q = (compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4]
    |-
  compose p q evalto (
        (* Clo *)
        f = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x],
        g = (compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4]
      )[fun x -> f (g x)]
    by E-App {
    (* E-App 1.1 *)
      (* Env *)
        compose = ()[fun f -> fun g -> fun x -> f (g x)],
        p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x],
        q = (compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4]
        |-
      compose p evalto (f = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun g -> fun x -> f (g x)] by E-App {
        (* E-App 1.1.1 *)
          (* Env *)
            compose = ()[fun f -> fun g -> fun x -> f (g x)],
            p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x],
            q = (compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4]
            |-
          compose evalto ()[fun f -> fun g -> fun x -> f (g x)] by E-Var2 {
            (* Env *)
              compose = ()[fun f -> fun g -> fun x -> f (g x)],
              p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x]
              |-
            compose evalto ()[fun f -> fun g -> fun x -> f (g x)] by E-Var2 {
              (* Env *)
                compose = ()[fun f -> fun g -> fun x -> f (g x)]
                |-
              compose evalto ()[fun f -> fun g -> fun x -> f (g x)] by E-Var1 {};
            };
          };
        (* E-App 1.1.2 *)
          (* Env *)
            compose = ()[fun f -> fun g -> fun x -> f (g x)],
            p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x],
            q = (compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4]
            |-
          p evalto (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x] by E-Var2 {
            (* Env *)
              compose = ()[fun f -> fun g -> fun x -> f (g x)],
              p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x]
              |-
            p evalto (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x] by E-Var1 {};
          };
        (* E-App 1.1.3 *)
        f = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x] |-
          fun g -> fun x -> f (g x) evalto (f = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun g -> fun x -> f (g x)] by E-Fun {};
      };
    (* E-App 1.2 *)
      (* Env *)
        compose = ()[fun f -> fun g -> fun x -> f (g x)],
        p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x],
        q = (compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4]
        |-
      q evalto (compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4] by E-Var1 {};
    (* E-App 1.3 *)
      (* Env 1.3 *)
        f = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x],
        g = (compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4]
        |-
      fun x -> f (g x) evalto (
        (* Clo *)
        f = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x],
        g = (compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4]
      )[fun x -> f (g x)] by E-Fun {};
  };
(* E-App 2 *)
  (* Env *)
    compose = ()[fun f -> fun g -> fun x -> f (g x)],
    p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x],
    q = (compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4]
    |-
  4 evalto 4 by E-Int {};
(* E-App 3 *)
  (* Env 3 *)
    f = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x],
    g = (compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4],
    x = 4
    |-
  f (g x) evalto 64 by E-App {
    (* E-App 3.1 *)
      (* Env 3 *)
        f = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x],
        g = (compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4],
        x = 4
        |-
      f evalto (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x] by E-Var2 {
        (* Env 3 *)
          f = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x],
          g = (compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4]
          |-
        f evalto (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x] by E-Var2 {
          (* Env 3 *)
            f = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x]
            |-
          f evalto (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x] by E-Var1 {};
        };
      };
    (* E-App 3.2 *)
      (* Env 3 *)
        f = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x],
        g = (compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4],
        x = 4
        |-
      g x evalto 8 by E-App {
        (* E-App 3.2.1 *)
          (* Env 3 *)
            f = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x],
            g = (compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4],
            x = 4
            |-
          g evalto (compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4] by E-Var2 {
            (* Env 3 *)
              f = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x],
              g = (compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4]
              |-
            g evalto (compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4] by E-Var1 {};
          };
        (* E-App 3.2.2 *)
          (* Env 3 *)
            f = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x],
            g = (compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x])[fun x -> x + 4],
            x = 4
            |-
          x evalto 4 by E-Var1 {};
        (* E-App 3.2.3 *)
          (* Env 3.2.3 *)
            compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x],
            x = 4
            |-
          x + 4 evalto 8 by E-Plus {
            (* Env 3.2.3 *)
              compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x],
              x = 4
              |-
            x evalto 4 by E-Var1 {};
            (* Env 3.2.3 *)
              compose = ()[fun f -> fun g -> fun x -> f (g x)], p = (compose = ()[fun f -> fun g -> fun x -> f (g x)])[fun x -> x * x],
              x = 4
              |-
            4 evalto 4 by E-Int {};
            4 plus 4 is 8 by B-Plus {};
          };
      };
    (* E-App 3.3 *)
      (* Env 3.3 *)
        compose = ()[fun f -> fun g -> fun x -> f (g x)],
        x = 8
        |-
      x * x evalto 64 by E-Times {
        (* Env 3.3 *)
          compose = ()[fun f -> fun g -> fun x -> f (g x)],
          x = 8
          |-
        x evalto 8 by E-Var1 {}; 
        (* Env 3.3 *)
          compose = ()[fun f -> fun g -> fun x -> f (g x)],
          x = 8
          |-
        x evalto 8 by E-Var1 {}; 
        8 times 8 is 64 by B-Times {};
      };
  };

}}}}
