|- (let compose = (fun f -> (fun g -> (fun x -> (f (g x))))) in (let f = (fun x -> (if x then 3 else 4)) in (let g = (fun x -> (x < 4)) in (((compose f) ((compose g) f)) true)))) : int by T-Let {
  |- (fun f -> (fun g -> (fun x -> (f (g x))))) : (('f -> 'g) -> (('h -> 'f) -> ('h -> 'g))) by T-Abs {
    f : ('f -> 'g) |- (fun g -> (fun x -> (f (g x)))) : (('h -> 'f) -> ('h -> 'g)) by T-Abs {
      f : ('f -> 'g), g : ('h -> 'f) |- (fun x -> (f (g x))) : ('h -> 'g) by T-Abs {
        f : ('f -> 'g), g : ('h -> 'f), x : 'h |- (f (g x)) : 'g by T-App {
          f : ('f -> 'g), g : ('h -> 'f), x : 'h |- f : ('f -> 'g) by T-Var {
          };
          f : ('f -> 'g), g : ('h -> 'f), x : 'h |- (g x) : 'f by T-App {
            f : ('f -> 'g), g : ('h -> 'f), x : 'h |- g : ('h -> 'f) by T-Var {
            };
            f : ('f -> 'g), g : ('h -> 'f), x : 'h |- x : 'h by T-Var {
            }
          }
        }
      }
    }
  };
  compose : 'g 'h 'f  . (('f -> 'g) -> (('h -> 'f) -> ('h -> 'g))) |- (let f = (fun x -> (if x then 3 else 4)) in (let g = (fun x -> (x < 4)) in (((compose f) ((compose g) f)) true))) : int by T-Let {
    compose : 'g 'h 'f  . (('f -> 'g) -> (('h -> 'f) -> ('h -> 'g))) |- (fun x -> (if x then 3 else 4)) : (bool -> int) by T-Abs {
      compose : 'g 'h 'f  . (('f -> 'g) -> (('h -> 'f) -> ('h -> 'g))), x : bool |- (if x then 3 else 4) : int by T-If {
        compose : 'g 'h 'f  . (('f -> 'g) -> (('h -> 'f) -> ('h -> 'g))), x : bool |- x : bool by T-Var {
        };
        compose : 'g 'h 'f  . (('f -> 'g) -> (('h -> 'f) -> ('h -> 'g))), x : bool |- 3 : int by T-Int {
        };
        compose : 'g 'h 'f  . (('f -> 'g) -> (('h -> 'f) -> ('h -> 'g))), x : bool |- 4 : int by T-Int {
        }
      }
    };
    compose : 'g 'h 'f  . (('f -> 'g) -> (('h -> 'f) -> ('h -> 'g))), f : (bool -> int) |- (let g = (fun x -> (x < 4)) in (((compose f) ((compose g) f)) true)) : int by T-Let {
      compose : 'g 'h 'f  . (('f -> 'g) -> (('h -> 'f) -> ('h -> 'g))), f : (bool -> int) |- (fun x -> (x < 4)) : (int -> bool) by T-Abs {
        compose : 'g 'h 'f  . (('f -> 'g) -> (('h -> 'f) -> ('h -> 'g))), f : (bool -> int), x : int |- (x < 4) : bool by T-Lt {
          compose : 'g 'h 'f  . (('f -> 'g) -> (('h -> 'f) -> ('h -> 'g))), f : (bool -> int), x : int |- x : int by T-Var {
          };
          compose : 'g 'h 'f  . (('f -> 'g) -> (('h -> 'f) -> ('h -> 'g))), f : (bool -> int), x : int |- 4 : int by T-Int {
          }
        }
      };
      compose : 'g 'h 'f  . (('f -> 'g) -> (('h -> 'f) -> ('h -> 'g))), f : (bool -> int), g : (int -> bool) |- (((compose f) ((compose g) f)) true) : int by T-App {
        compose : 'g 'h 'f  . (('f -> 'g) -> (('h -> 'f) -> ('h -> 'g))), f : (bool -> int), g : (int -> bool) |- ((compose f) ((compose g) f)) : (bool -> int) by T-App {
          compose : 'g 'h 'f  . (('f -> 'g) -> (('h -> 'f) -> ('h -> 'g))), f : (bool -> int), g : (int -> bool) |- (compose f) : ((bool -> bool) -> (bool -> int)) by T-App {
            compose : 'g 'h 'f  . (('f -> 'g) -> (('h -> 'f) -> ('h -> 'g))), f : (bool -> int), g : (int -> bool) |- compose : ((bool -> int) -> ((bool -> bool) -> (bool -> int))) by T-Var {
            };
            compose : 'g 'h 'f  . (('f -> 'g) -> (('h -> 'f) -> ('h -> 'g))), f : (bool -> int), g : (int -> bool) |- f : (bool -> int) by T-Var {
            }
          };
          compose : 'g 'h 'f  . (('f -> 'g) -> (('h -> 'f) -> ('h -> 'g))), f : (bool -> int), g : (int -> bool) |- ((compose g) f) : (bool -> bool) by T-App {
            compose : 'g 'h 'f  . (('f -> 'g) -> (('h -> 'f) -> ('h -> 'g))), f : (bool -> int), g : (int -> bool) |- (compose g) : ((bool -> int) -> (bool -> bool)) by T-App {
              compose : 'g 'h 'f  . (('f -> 'g) -> (('h -> 'f) -> ('h -> 'g))), f : (bool -> int), g : (int -> bool) |- compose : ((int -> bool) -> ((bool -> int) -> (bool -> bool))) by T-Var {
              };
              compose : 'g 'h 'f  . (('f -> 'g) -> (('h -> 'f) -> ('h -> 'g))), f : (bool -> int), g : (int -> bool) |- g : (int -> bool) by T-Var {
              }
            };
            compose : 'g 'h 'f  . (('f -> 'g) -> (('h -> 'f) -> ('h -> 'g))), f : (bool -> int), g : (int -> bool) |- f : (bool -> int) by T-Var {
            }
          }
        };
        compose : 'g 'h 'f  . (('f -> 'g) -> (('h -> 'f) -> ('h -> 'g))), f : (bool -> int), g : (int -> bool) |- true : bool by T-Bool {
        }
      }
    }
  }
}
